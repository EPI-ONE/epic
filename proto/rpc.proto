syntax = "proto3";

package rpc;

message Hash {
    bytes hash = 1;
}

message Outpoint {
    Hash fromblock = 1;
    uint32 txidx = 2;
    uint32 outidx = 3;
}

message Input {
    Outpoint outpoint = 1;
    bytes listing = 2;
}

message Output{
    bytes address = 1;
    uint64 money = 2;
}

message Transaction {
    repeated Input inputs = 1;
    repeated Output outputs = 2;
}

message Block {
  uint32 version = 1;
  Hash milestoneBlockHash = 2;
  Hash prevBlockHash = 3;
  Hash tipBlockHash = 4;
  uint32 diffTarget = 5;
  uint32 nonce = 6;
  uint64 time = 7;
  repeated uint32 proof = 8;
  repeated Transaction transactions = 9;
}

service BasicBlockExplorerRPC {
    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);
    rpc GetNewMilestoneSince (GetNewMilestoneSinceRequest) returns (GetNewMilestoneSinceResponse);
    rpc GetLatestMilestone (GetLatestMilestoneRequest) returns (GetLatestMilestoneResponse);
    rpc GetLevelSet (GetLevelSetRequest) returns (GetLevelSetResponse);
    rpc GetLevelSetSize (GetLevelSetSizeRequest) returns (GetLevelSetSizeResponse);
}

message GetBlockRequest {
    Hash hash = 1;
}

message GetBlockResponse {
    Block block = 1;
}

message GetNewMilestoneSinceRequest {
    Hash hash = 1;
    int64 number = 2;
}

message GetNewMilestoneSinceResponse {
    repeated Block blocks = 1;
}

message GetLatestMilestoneRequest {}

message GetLatestMilestoneResponse {
    Block milestone = 1;
}

message GetLevelSetRequest {
    Hash hash = 1;
}

message GetLevelSetResponse {
    repeated Block blocks = 1;
}

message GetLevelSetSizeRequest {
    Hash hash = 1;
}

message GetLevelSetSizeResponse {
    uint64 size = 1;
}

service CommanderRPC {
    rpc Status (StatusRequest) returns (StatusResponse);
    rpc Stop (StopRequest) returns (StopResponse);
    rpc StartMiner (StartMinerRequest) returns (StartMinerResponse);
    rpc StopMiner (StopMinerRequest) returns (StopMinerResponse);
    rpc CreateFirstReg (CreateFirstRegRequest) returns (CreateFirstRegResponse);
    rpc CreateRandomTx (CreateRandomTxRequest) returns (CreateRandomTxResponse);
    rpc GenerateNewKey(GenerateNewKeyRequest) returns (GenerateNewKeyResponse);
    rpc GetBalance(GetBalanceRequest) returns (GetBalanceResponse);
    rpc CreateTx(CreateTxRequest) returns (CreateTxResponse);
    rpc SetPassphrase(SetPassphraseRequest) returns(SetPassphraseResponse);
    rpc ChangePassphrase(ChangePassphraseRequest) returns (ChangePassphraseResponse);
    rpc Login(LoginRequest) returns (LoginResponse);
    rpc DisConnectPeer(DisConnectPeerRequest) returns(DisConnectPeerResponse);
    rpc DisConnectAllPeers(DisConnectAllRequest) returns (DisConnectAllResponse);
    rpc ConnectPeer(ConnectRequest) returns (ConnectResponse);
    rpc SyncCompleted(SyncStatusRequest) returns (SyncStatusResponse);
}

message StopRequest {}

message StopResponse {}

message StartMinerRequest {}

message StartMinerResponse {
    bool success = 1;
}

message StopMinerRequest {}

message StopMinerResponse {
    string result = 1;
}

message StatusRequest {}

message StatusResponse {
    bool isMinerRunning = 1;
    Hash latestMSHash = 2;
}

message CreateFirstRegRequest {
    string address = 1;
    bool force = 2;
}

message CreateFirstRegResponse {
    string result = 1;
}

message CreateRandomTxRequest{
    uint64 size = 1;
}

message CreateRandomTxResponse{
    string result = 1;
}

message GenerateNewKeyRequest{}

message GenerateNewKeyResponse{
    string address = 1;
}

message GetBalanceRequest{}

message GetBalanceResponse{
    string coin = 1;
}

message CreateTxRequest{
    uint64 fee = 1;
    repeated Output outputs = 2;
}

message CreateTxResponse{
    string txInfo = 1;
}

message SetPassphraseRequest {
    string passphrase = 1;
}

message SetPassphraseResponse {
    string responseInfo = 1;
}

message ChangePassphraseRequest {
    string oldPassphrase = 1;
    string newPassphrase = 2;
}

message ChangePassphraseResponse {
    string responseInfo = 1;
}

message LoginRequest {
    string passphrase = 1;
}

message LoginResponse {
    string responseInfo = 1;
}

service RemoteSolver {
    rpc SendPOWTask (POWTask) returns (POWResult);
    rpc StopTask (StopTaskRequest) returns (StopTaskResponse);
}

message POWTask{
    uint32 task_id = 1;
    uint32 cycle_length = 2;
    uint32 init_nonce =3;
    uint32 init_time = 4;
    uint32 step = 5;
    bytes header = 6;
    string target = 7;
}

message POWResult{
    uint32 task_id = 1;
    uint32 nonce = 2;
    uint32 time = 3;
    repeated uint32 proof = 4;
    uint32 error_code = 5;
}

message StopTaskRequest{
    uint32 task_id = 1;
}

message StopTaskResponse{
    string result = 1 ;
}

message DisConnectAllRequest{}

message DisConnectAllResponse{
    string result = 1;
}

message DisConnectPeerRequest{
    string address =1;
}

message DisConnectPeerResponse{
    string result = 1;
}

message ConnectRequest{
    repeated string address = 1;
}

message ConnectResponse{
    string result = 1;
}

message SyncStatusRequest {}

message SyncStatusResponse {
    bool completed = 1;
}
