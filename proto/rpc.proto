syntax = "proto3";

package rpc;

message Hash {
    bytes hash = 1;
}

message Outpoint {
    Hash fromblock = 1;
    uint32 txidx = 2;
    uint32 outidx = 3;
}

message Input {
    Outpoint outpoint = 1;
    bytes listing = 2;
}

message Output{
    bytes address = 1;
    uint64 money = 2;
}

message Transaction {
    Hash transaction_hash = 1;
    repeated Input inputs = 3;
    repeated Output outputs = 4;
}

message Block {
  Hash block_hash = 1;
  uint32 version = 2;
  Hash milestoneBlockHash = 3;
  Hash prevBlockHash = 4;
  Hash tipBlockHash = 5;
  Hash merkleRoot = 6;
  uint32 diffTarget = 7;
  uint32 nonce = 8;
  uint64 time = 9;
  repeated Transaction transactions = 10;
}

service BasicBlockExplorerRPC {
    rpc GetBlock (GetBlockRequest) returns (GetBlockResponse);
    rpc GetNewMilestoneSince (GetNewMilestoneSinceRequest) returns (GetNewMilestoneSinceResponse);
    rpc GetLatestMilestone (GetLatestMilestoneRequest) returns (GetLatestMilestoneResponse);
    rpc GetLevelSet (GetLevelSetRequest) returns (GetLevelSetResponse);
    rpc GetLevelSetSize (GetLevelSetSizeRequest) returns (GetLevelSetSizeResponse);
}

message GetBlockRequest {
    Hash hash = 1;
}

message GetBlockResponse {
    Block block = 1;
}

message GetNewMilestoneSinceRequest {
    Hash hash = 1;
    int64 number = 2;
}

message GetNewMilestoneSinceResponse {
    repeated Block blocks = 1;
}

message GetLatestMilestoneRequest {}

message GetLatestMilestoneResponse {
    Block milestone = 1;
}

message GetLevelSetRequest {
    Hash hash = 1;
}

message GetLevelSetResponse {
    repeated Block blocks = 1;
}

message GetLevelSetSizeRequest {
    Hash hash = 1;
}

message GetLevelSetSizeResponse {
    uint64 size = 1;
}

service CommanderRPC {
    rpc Status (StatusRequest) returns (StatusResponse);
    rpc Stop (StopRequest) returns (StopResponse);
    rpc StartMiner (StartMinerRequest) returns (StartMinerResponse);
    rpc StopMiner (StopMinerRequest) returns (StopMinerResponse);
    rpc CreateRandomTx (CreateRandomTxRequest) returns (CreateRandomTxResponse);
    rpc GenerateNewKey(GenerateNewKeyRequest) returns (GenerateNewKeyResponse);
    rpc GetBalance(GetBalanceRequest) returns(GetBalanceResponse);
    rpc CreateTx(CreateTxRequest) returns(CreateTxResponse);
}

message StopRequest {}

message StopResponse {}

message StartMinerRequest {}

message StartMinerResponse {
    bool success = 1;
}

message StopMinerRequest {}

message StopMinerResponse {
    bool success = 1;
}

message StatusRequest {}

message StatusResponse {
    bool isMinerRunning = 1;
    Hash latestMSHash = 2;
}

message CreateRandomTxRequest{
    uint64 size = 1;
}

message CreateRandomTxResponse{
    string result = 1;
}

message GenerateNewKeyRequest{}

message GenerateNewKeyResponse{
    string privateKey = 1;
    string pubKey = 2;
    string address = 3;
}

message GetBalanceRequest{}

message GetBalanceResponse{
    string coin = 1;
}

message CreateTxRequest{
    uint64 fee =1;
    repeated Output outputs=2;
}

message CreateTxResponse{
    string txInfo = 1;
}
