/*******************************************************************************
 * CLI - A simple command line interface.
 * Copyright (C) 2016 Daniele Pallastrelli
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/*******************************************************************************
 * Copyright (c) 2019 EPI-ONE Core Developers
 * Distributed under the MIT software license, see the accompanying
 * file COPYING or http://www.opensource.org/licenses/mit-license.php.
 ******************************************************************************/

#ifndef CLI_LINUXKEYBOARD_H_
#define CLI_LINUXKEYBOARD_H_

#include <atomic>
#include <memory>
#include <thread>

#include <stdio.h>
#include <sys/time.h>
#include <sys/types.h>
#include <termios.h>
#include <unistd.h>

#include "inputdevice.h"


namespace cli {

class LinuxKeyboard : public InputDevice {
public:
    explicit LinuxKeyboard() {
        ToManualMode();
        servant = std::make_unique<std::thread>([this]() { Read(); });
        servant->detach();
    }
    ~LinuxKeyboard() {
        run = false;
        ToStandardMode();
    }

    void ToManualMode() {
        tcgetattr(STDIN_FILENO, &oldt);
        newt = oldt;
        newt.c_lflag &= ~(ICANON | ECHO);
        tcsetattr(STDIN_FILENO, TCSANOW, &newt);
    }
    void ToStandardMode() {
        tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
    }

private:
    void Read() {
        while (run) {
            if (KbHit()) {
                std::pair<KeyType, char> k;
                do {
                    k = Get();
                    Notify(k);
                } while (k.second != EOF);
            }
        }
    }

    std::pair<KeyType, char> Get() {
        int ch = getchar();
        switch (ch) {
            case 127:
                return std::make_pair(KeyType::backspace, ' ');
            case 10:
                return std::make_pair(KeyType::ret, ' ');
            case 27: // symbol
                ch = getchar();
                if (ch == 91) // arrow keys
                {
                    ch = getchar();
                    switch (ch) {
                        case 51:
                            ch = getchar();
                            if (ch == 126)
                                return std::make_pair(KeyType::canc, ' ');
                            else
                                return std::make_pair(KeyType::ignored, ' ');
                        case 65:
                            return std::make_pair(KeyType::up, ' ');
                        case 66:
                            return std::make_pair(KeyType::down, ' ');
                        case 68:
                            return std::make_pair(KeyType::left, ' ');
                        case 67:
                            return std::make_pair(KeyType::right, ' ');
                        case 70:
                            return std::make_pair(KeyType::end, ' ');
                        case 72:
                            return std::make_pair(KeyType::home, ' ');
                    }
                }
                break;
            default: // ascii
            {
                const char c = static_cast<char>(ch);
                return std::make_pair(KeyType::ascii, c);
            }
        }
        return std::make_pair(KeyType::ignored, ' ');
    }

    static int KbHit() {
        struct timeval tv;
        fd_set rdfs;

        tv.tv_sec  = 1;
        tv.tv_usec = 0;

        FD_ZERO(&rdfs);
        FD_SET(STDIN_FILENO, &rdfs);

        select(STDIN_FILENO + 1, &rdfs, NULL, NULL, &tv);
        return FD_ISSET(STDIN_FILENO, &rdfs);
    }

    termios oldt;
    termios newt;
    std::atomic<bool> run{true};
    std::unique_ptr<std::thread> servant;
};

} // namespace cli

#endif // CLI_LINUXKEYBOARD_H_
